using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using Reloadify.Analyzers;
using Reloadify.Analyzers.Extensions;

namespace Reloadify.Forms
{
    [Generator]
    public class FormsViewsAnalyser : ISourceGenerator
    {
        private static readonly DiagnosticDescriptor InvalidViewWarning = new DiagnosticDescriptor(id: "XFVIEW001",
                                                                                                   title: "Hotreload watcher",
                                                                                                   messageFormat: "HotReload will not watch changes for file '{0}'.\n You can manually insert the hotreload constructor for your view eg.: `MyView() : this(true)` or make it partial",
                                                                                                   category: "HotReload Generator",
                                                                                                   DiagnosticSeverity.Warning,
                                                                                                   isEnabledByDefault: true);

        public void Initialize(GeneratorInitializationContext context)
        {
#if DEBUG
            //if (!Debugger.IsAttached)
            //{
            //    try
            //    {
            //        Debugger.Launch();
            //    }
            //    catch (NotImplementedException) { }
            //}
#endif 
            // Register a syntax receiver that will be created for each generation pass
            context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            try
            {
                // retrieve the populated receiver 
                if (!(context.SyntaxReceiver is SyntaxReceiver receiver))
                    return;

                foreach (var classContext in receiver.ClassToAugment)
                {
                    var userClass = classContext.UserClass;
                    if (!userClass.TryGetParentSyntax<NamespaceDeclarationSyntax>(out var namespaceDeclarationSyntax))
                        continue;

                    var className = userClass.Identifier.ToString();
                    var userNamespace = namespaceDeclarationSyntax.Name.ToString();
                    var visualElementSymbol = context.Compilation.GetTypeByMetadataName("Xamarin.Forms.VisualElement");
                    var currentClass = context.Compilation.GetTypeByMetadataName($"{userNamespace}.{className}");
                    if (!InheritsFrom(currentClass, visualElementSymbol))
                        continue;

                    if (!classContext.IsPartial)
                    {
                        context.ReportDiagnostic(Diagnostic.Create(InvalidViewWarning, Location.None, className));
                        continue;
                    }

                    var classSource = $@"
/* <auto-generated>
     This code was generated by a tool. Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 </auto-generated> */
namespace {userNamespace}
{{
    [System.CodeDom.Compiler.GeneratedCode(""Reloadify.Forms"", ""{Assembly.GetExecutingAssembly().GetName().Version}"")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class {className}
    {{
        public {className}(bool fromHotreload)
        {{

#if DEBUG
                Reloadify.Forms.HotReload.WatchInstance(this);
#endif
        }}

#if DEBUG
        protected override void OnPropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {{
            base.OnPropertyChanged(propertyName);
            Reloadify.Forms.HotReload.WatchInstance(this);
        }}
#endif
    }}
}}
";
                    context.AddSource($"{className}_instanceWatcher.cs", SourceText.From(classSource, Encoding.UTF8));
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
            }
        }

        private bool InheritsFrom(INamedTypeSymbol symbol, INamedTypeSymbol compareInherrit)
        {
            while (true)
            {
                if (symbol.ToString() == compareInherrit.ToString())
                {
                    return true;
                }
                if (symbol.BaseType != null)
                {
                    symbol = symbol.BaseType;
                    continue;
                }
                break;
            }
            return false;
        }
    }
}
