using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Reloadify.Forms
{
    [Generator]
    public class FormsViewsAnalyser : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
#if DEBUG
            //if (!Debugger.IsAttached)
            //{
            //    try
            //    {
            //        Debugger.Launch();
            //    }
            //    catch (NotImplementedException) { }
            //}
#endif 
            // Register a syntax receiver that will be created for each generation pass
            context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            try
            {
                // retrieve the populated receiver 
                if (!(context.SyntaxReceiver is SyntaxReceiver receiver))
                    return;

                foreach (var userClass in receiver.ClassToAugment)
                {
                    if (!SyntaxNodeHelper.TryGetParentSyntax<NamespaceDeclarationSyntax>(userClass, out var namespaceDeclarationSyntax))
                        continue;

                    var className = userClass.Identifier.ToString();
                    var userNamespace = namespaceDeclarationSyntax.Name.ToString();

                    var visualElementSymbol = context.Compilation.GetTypeByMetadataName("Xamarin.Forms.VisualElement");
                    var currentClass = context.Compilation.GetTypeByMetadataName($"{userNamespace}.{className}");
                    if (!InheritsFrom(currentClass, visualElementSymbol))
                        continue;

                    var classSource = $@"
/* <auto-generated>
     This code was generated by a tool. Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 </auto-generated> */
namespace {userNamespace}
{{
    [System.CodeDom.Compiler.GeneratedCode(""Reloadify.Forms"", ""{Assembly.GetExecutingAssembly().GetName().Version}"")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class {className}
    {{
        public {className}(bool fromHotreload)
        {{
                Reloadify.Forms.HotReload.InsertInstance(this);
                _isInstanceInitialized = true;
        }}

#if DEBUG
        private bool _isInstanceInitialized = false;

        protected override void OnPropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {{
            base.OnPropertyChanged(propertyName);

            if (!_isInstanceInitialized)
            {{
                Reloadify.Forms.HotReload.InsertInstance(this);
                _isInstanceInitialized = true;
            }}
        }}
#endif
    }}
}}
";
                    context.AddSource($"{className}_instanceWatcher.cs", SourceText.From(classSource, Encoding.UTF8));
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
            }
        }

        private bool InheritsFrom(INamedTypeSymbol symbol, INamedTypeSymbol compareInherrit)
        {
            while (true)
            {
                if (symbol.ToString() == compareInherrit.ToString())
                {
                    return true;
                }
                if (symbol.BaseType != null)
                {
                    symbol = symbol.BaseType;
                    continue;
                }
                break;
            }
            return false;
        }

        class SyntaxReceiver : ISyntaxReceiver
        {
            public List<ClassDeclarationSyntax> ClassToAugment { get; private set; }

            public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
            {
                if (ClassToAugment is null)
                    ClassToAugment = new List<ClassDeclarationSyntax>();

                if (syntaxNode is ClassDeclarationSyntax cds)
                {
                    Debug.WriteLine($"Visiting {syntaxNode}");
                    try
                    {
                        if (!cds.Modifiers.Any(m => m.IsKind(SyntaxKind.PartialKeyword)))
                        {
                            var partialKeyword = SyntaxFactory.Token(SyntaxKind.PartialKeyword);
                            cds.AddModifiers(partialKeyword);
                        }
                    }
                    catch (Exception)
                    {

                    }

                    ClassToAugment.Add(cds);
                }
            }

            //public void OnVisitSyntaxNode(GeneratorSyntaxContext syntaxNode)
            //{
            //    Debug.WriteLine($"Visiting {syntaxNode.Node}");
            //    if (syntaxNode.Node is ClassDeclarationSyntax cds)// &&
            //                                                 //cds.BaseList.Types.Any(t => t.Type.ToString() == "ContentPage"))
            //    {
            //        if (!cds.Modifiers.Any(m => m.IsKind(SyntaxKind.PartialKeyword)))
            //        {
            //            var partialKeyword = SyntaxFactory.Token(SyntaxKind.PartialKeyword);
            //            cds.AddModifiers(partialKeyword);
            //        }

            //        ClassToAugment = cds;
            //    }
            //}
        }

        static class SyntaxNodeHelper
        {
            public static bool TryGetParentSyntax<T>(SyntaxNode syntaxNode, out T result)
                where T : SyntaxNode
            {
                // set defaults
                result = null;

                if (syntaxNode == null)
                {
                    return false;
                }

                try
                {
                    syntaxNode = syntaxNode.Parent;

                    if (syntaxNode == null)
                    {
                        return false;
                    }

                    if (syntaxNode.GetType() == typeof(T))
                    {
                        result = syntaxNode as T;
                        return true;
                    }

                    return TryGetParentSyntax<T>(syntaxNode, out result);
                }
                catch
                {
                    return false;
                }
            }
        }

    }
}
